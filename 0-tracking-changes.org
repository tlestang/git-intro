# -*- org-confirm-babel-evaluate: nil; org-html-htmlize-output-type: css; -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/rethink_inline.css"/>
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="css/highlighting.css"/>

#+LATEX_HEADER: \usepackage{geometry}[bottom=2cm, top=2cm, left=2cm, right=2cm]

#+PROPERTY: header-args :dir ~/git-intro/0-tracking-changes

#+NAME: init
#+begin_src shell :exports none
  rm -rf .git
  cp -f ../0-start/plot_data.py .
  cp -f ../0-start/example_data.csv .
#+end_src

#+NAME: format-patches
#+begin_src shell :exports none
  git format-patch --root --output-directory ../1-start
#+end_src

#+hugo_base_dir: ~/my-new-site
#+hugo_section: tracking-changes
#+hugo_weight: auto

* Tracking changes
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:

[[file:/camera.png][file:/camera.png]]

Version control is about tracking changes made to files. In Git, a
/version/ refers to a particular state of the project, and version
control is achieved by frequently recording this state in a database
of versions.

A useful analogy is to view Git as a special camera, with which you
could take snapshots of your project.  You start by taking a first
picture of the collection of files that make your project: that's your
first version.  You then make changes one or more files, and take
another picture: that's your second version. And so on an so forth.

* Initialising the repository
:PROPERTIES:
:EXPORT_FILE_NAME: initialising_the_repo
:END:

#+CALL: init()

A /repository/ refers to a directory containing a database of
versions. With Git, the database of versions -- along with various
other settings -- is contained in a hidden =.git/= directory inside a
repository.

We start with a directory =0-tracking-changes= that contains a Python
script =plot_data.py= as well as some data file =example_data.csv=.

#+begin_src python :tangle 0-tracking-changes/plot_data.py :exports code
  import numpy

  data = numpy.loadtxt("example_data.csv", delimiter=",")
#+end_src

#+begin_src yaml :tangle 0-tracking-changes/example_data.csv :exports code
  -2,0.699369
  -1.64,0.700462
  -1.33,0.695354
  -0.7,1.03905
  0,1.97389
  0.45,2.41143
  1.2,1.91091
  1.64,0.919576
  2.32,-0.730975
  2.9,-1.42001
#+end_src

To make this directory a Git repository, change to it (using the =cd=
command) and run

#+begin_src shell :results output :exports both
  git init
#+end_src

#+begin_src shell :exports results :results none
  git config --local user.email contact@thibaultlestang.net
#+end_src

* Recording the initial version
:PROPERTIES:
:EXPORT_FILE_NAME: making_the_initial_commit
:END:

The output of =git status= displays information about the state of your
project.

#+begin_src shell :results output :exports both
  git status
#+end_src

Git does not automatically track files in the project.  To instruct
Git to start tracking changes to a particular set of file, use the
=git add= command.

#+begin_src shell :results output :exports both
  git add plot_data.py example_data.csv
#+end_src

You can now record the state of the files, /i.e./ take your first
snapshot of the project's state.  In Git, the action of making a
record in the database of version is refered to as /committing/ the
changes.  This is done with the =git commit= command:

#+begin_src shell :exports code
  git commit
#+end_src

#+begin_src shell :results output :exports results
  git commit -m "Add Python script"
#+end_src

* Displaying changes
:PROPERTIES:
:EXPORT_FILE_NAME: displaying_changes
:END:

Let's plot our data using matplotlib

# A source code block marked with ":exports code" will not be
# evaluated on exporting.  It makes sense if the point of of
# evaluationf a source block is to view its output.  But not so true
# for diff blocks.

# 2022-12-08 Using ":exports both" for now.

#+begin_src diff :results output :exports both
  --- plot_data.py
  +++ plot_data.py
  @@ -1,3 +1,5 @@
   import numpy
  +import matplotlib.pyplot as plt

   data = numpy.loadtxt("example_data.csv", delimiter=",")
  +plt.plot(data[:, 0], data[:, 1])
#+end_src

Check the status of your repository with =git status=

#+begin_src shell :results output :exports both
  git status
#+end_src

The above tells us that we modified ~plot_data.py~ since the last
recorded snapshot. We can ask git to print what changed since

#+begin_src shell :results output :exports both
  git diff
#+end_src

Let's record ou changes using =git commit= again:

#+begin_src shell :results output :exports both
  git commit -a -m "Use matplotlib to create plot"
#+end_src

At this point, the history of your project consists of two versions.
You can display the history using the =git log= command:

#+begin_src shell :results output :exports both
  git log
#+end_src

#+begin_note
  Use 'q' to quit the log.
#+end_note

* Activity 0 - the Git index
:PROPERTIES:
:EXPORT_FILE_NAME: the_staging_area
:END:

#+begin_src shell :exports results :results none
  git format-patch --root --output-directory ../activity-0
#+end_src

It is very common, when developing software, to make succesive changes
that do not relate to each other.  This activity introduces the
/index/: a way to control exactly what changes are recorded in
the next commited version.

Start by navigating into the activity directory

#+begin_src shell :exports code
  cd activity-0
#+end_src

1. Use =git status= and =git diff= to query the current status of the
   repository.
2. What does Git say if you try to record a new version?
   #+begin_src shell exports: code
     git commit
   #+end_src
3. The repository contains two changes that have not yet been recorded
   in Git.  The first one adds a label for the columns of the example
   data file, and the second one specifies a title for the figure
   generated by =plot_data.py=.  These two changes do not relate to
   each other, and we would like to record them in two separate
   commits.

   - Use =git add= to /stage/ the change to the data file:
     #+begin_src shell exports: code
       git add example_data.csv
     #+end_src
   - Print the new status of the repository with =git status=. What
     changed?
   - Compare the output of =git diff= and =git diff --staged=.
   - Commit the change using =git commit=:
     #+begin_src shell exports: code
       git commit -m "Add a label to columns of example data"
     #+end_src
4. Repeat 3) for the other change.
5. When all changes in the working directory should be recorded
   together, it's often more convenient to use =git commit -a= rather
   than =git add= then =git commit=.  Lookup to meaning of the the
   =-a= option in [[https://git-scm.com/docs/git-commit][the documentation for =git-commit=]].
     
#+begin_src diff :exports both :results output
  --- example_data.csv
  +++ example_data.csv
  @@ -1,3 +1,4 @@
  +# xdata,ydata
   -2,0.699369
   -1.64,0.700462
   -1.33,0.695354
#+end_src

#+begin_src diff :exports both :results output
  --- plot_data.py
  +++ plot_data.py
  @@ -3,3 +3,4 @@ import matplotlib.pyplot as plt

   data = numpy.loadtxt("example_data.csv", delimiter=",")
   plt.plot(data[:, 0], data[:, 1])
  +plt.title("A title")
#+end_src

#+begin_src shell :exports both :results output
  git diff > ../activity-0/unstaged.patch
#+end_src

#+begin_src shell :exports both :results output
  git add example_data.csv
  git commit -m "Add header to CSV data file"
#+end_src

#+begin_src shell :exports both :results output
  git add plot_data.py
  git commit -m "Add a title to the figure"
#+end_src

When practicing version control, it is important to record versions
that group changes that relate to each other.  First, it makes the
history easier to follow.  Second, it makes it easier to /undo/
specific changes if there are recorded in separate versions.

Git makes use of the concept of the /index/ (otherwise known as the
/staging area/).  The index is an intermediate place between the
working directory and the database of recorded versions. To be
included in the next version, changes must be added to the index
first. By default, the index is empty: recording a version with =git
commit= doesn't make sense since this this version would be no
different than the previous one. In this case, Git does not add a new
version and instead print the output of =git status=, prompting you to
add changes to the index.

* Displaying the log of changes
:PROPERTIES:
:EXPORT_FILE_NAME: displaying_the_log_of_changes
:END:

Git provides a wealth of tools to display and analyse the history of a
project. The main entry point to these functionalities is the =git
log= command.

#+begin_src :results output shell :exports code
  git log
#+end_src

#+begin_src shell :results output :exports results
  git log -n 3
#+end_src

You go up and down the list by using the up and down arrow keys on
your keyboard. You can also use the space key to scroll throught one
page at a time. *To exit, press the =q= key*.

The =git log= command prints a list of all our versions
back to the first recorded one (known as the /root commit/). By
default, =git log= includes:

- Author and date.
- Commit message.
- Unique identifier.

Ask Git to print the changes associated to each commit:

#+begin_src shell :exports code
  git log --patch # (or -p)
#+end_src

#+begin_src shell :results output :exports results
  git log -p -3
#+end_src

* Git is line-oriented
:PROPERTIES:
:EXPORT_FILE_NAME: git_is_line_oriented
:END:

Let's introduce a temporary variable to avoid hardcoding the name of
our data file in the call to ~loadtxt~.

#+begin_src diff :exports both
  --- plot_data.py
  +++ plot_data.py
  @@ -1,6 +1,7 @@
   import numpy
   import matplotlib.pyplot as plt

  -data = numpy.loadtxt("example_data.csv", delimiter=",")
  +filename = "example_data.csv"
  +data = numpy.loadtxt(filename, delimiter=",")
   plt.plot(data[:, 0], data[:, 1])
   plt.title("A title")
#+end_src

Use =git diff= to visualise your changes:

#+begin_src shell :results output :exports both
  git diff
#+end_src

Alternatively, you can use the =--stat= option to display the number
of lines added and removed -- among other things.

#+begin_src shell :results output :exports both
  git diff --stat
#+end_src

Git counts two one line removed, and two lines added. Even though you
changes only part of a line, Git considers that the whole line
changed, replace by another one.

*Lesson: for Git, the smallest unit of change is the line.*

#+CALL: format-patches[:exports none]()

