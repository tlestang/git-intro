# -*- org-confirm-babel-evaluate: nil; org-html-htmlize-output-type: css; -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/rethink_inline.css"/>
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="css/highlighting.css"/>

#+LATEX_HEADER: \usepackage{geometry}[bottom=2cm, top=2cm, left=2cm, right=2cm]

#+PROPERTY: header-args :dir 1-undoing-things

#+INCLUDE: init_1.inc
#+CALL: init[:results output]()

#+TITLE:Undoing things
#+AUTHOR: Thibault Lestang
#+DATE: nil


* Amending commits

The =git commit --amend= option overwrites the latest commit.  It is
very common to commit a typo, whether in the code or the commit
message.  For instance

#+begin_src diff :exports both
  diff --git a/plot_data.py b/plot_data.py
  index 85bbb3b..e5f4d02 100644
  --- a/plot_data.py
  +++ b/plot_data.py
  @@ -1,6 +1,7 @@
   import numpy
   import matplotlib.pyplot as plt

  -data = numpy.loadtxt("example_data.csv", delimiter=",")
  +filename = "example.csv"
  +data = numpy.loadtxt(filename, delimiter=",")
   plt.plot(data[:, 0], data[:, 1])
   plt.title("A title")
#+end_src

#+begin_src shell :exports both :results output
  git add plot_data.py
  git commit -m "This commits the wrong filename!"
#+end_src

Let's fix the typo and instead of adding a new commit, overwrite our
previous commit:

#+begin_src diff :exports both
  diff --git a/plot_data.py b/plot_data.py
  index e5f4d02..699defe 100644
  --- a/plot_data.py
  +++ b/plot_data.py
  @@ -1,7 +1,7 @@
   import numpy
   import matplotlib.pyplot as plt

  -filename = "example.csv"
  +filename = "example_csv.csv"
   data = numpy.loadtxt(filename, delimiter=",")
   plt.plot(data[:, 0], data[:, 1])
   plt.title("A title")
#+end_src

The =--amend= option to =git commit= allows to rewrite the commit message.

#+begin_src shell :exports code
  git commit --amend
#+end_src

#+begin_src shell :exports results :results output
  git commit -am "Store filename in a variable" --amend
#+end_src

* Unstaging with =git restore=

Another very common action is to unstage a change you've added to the
staging area.  For instance if you decide against committing a given
change right now.

#+begin_src diff
  diff --git a/plot_data.py b/plot_data.py
  index 699defe..09d158a 100644
  --- a/plot_data.py
  +++ b/plot_data.py
  @@ -1,2 +1,3 @@
  +# A comment that we won't commit
   import numpy
   import matplotlib.pyplot as plt
#+end_src

Wer can check the change is added to the staging area
#+begin_src shell
  git status
#+end_src

Unstage it with

#+begin_src shell
  git restore --staged plot_data.py
#+end_src

The command =git restore --staged= does not undo the change, it
removes it from the staging area.  The file is still modified, but if
you use =git commit=, no change will be commited.

Omitting the =--staged= option effectively undoes the change,
*overqwriting* the file on disk.

#+begin_src shell
  git restore plot_data.py
#+end_src

* =reset= and =revert=

So far =git commit --amend= and =git restore= worked on the latest
changes, commited or staged.  How can we undo more that one commit, or
a commit deeper into the history?

** Undoing more than one commit with =git reset=

The =git reset= *removes commits*.  It takes a commit id and removes
all commits leading to it from the latest commit.  Changes for all the
removed commit are not undone and remain on disk.

Let's say we want to remove all commits up to the first one.  We have
a total of 4 commits, so we can use

#+CALL: save-patches[:exports result]()

#+begin_src shell :exports both :results output
  git reset HEAD~3 # HEAD~3 is equivalent to the id of the first commit
#+end_src

The log (=git log=) now shows only one commit, the first one.  The
commits are gone, but not the associated changes:

#+begin_src shell :exports both :results output
  git status
#+end_src

#+begin_src shell :exports both :results output
  git diff --stats
#+end_src

Let's restore the commits

#+begin_src shell :exports both :results output
  git restore plot_data.py example_data.csv
  git am ../undo_reset/*.patch
#+end_src

The behavior of =git reset= can be altered by two options:

- =git reset --soft= :: Leaves the changes in the staging area (in
  contrast to =git reset= which leaves the changes unstaged).
- =git reset --hard= :: Undoes the change.

The =git reset --hard= is the nuclear option. It removes the commits
and undoes the asspciated changes. *Use with the greatest caution*.

* Activity: undoing things

1. The latest commit introduces a typo in spelling the
   =scipy.optimize= module.  Fix the typo and ammend the commit.
   *Trick*: use the =--no-edit= switch with =git commit --amend= to
   specify you don't want to modify the commit message.
2. Take look at the changes introduced in commit =3880a54= (second
   from last).  It's one big commit that adds two changes:
   - Add least-square fitting of the data (and plot of the fitted model).
   - Change the style of the data points.
   To maintain a clear history (think about you 6 months from now),
   let's make two distinct commits: one with the plot style change,
   and one that introcudes the model fitting.
   1. Start by discarding the two latest commits, keeping the changes
      in the working directory:
      #+begin_src shell :exports code
	git reset --mixed HEAD~2 # or git reset HEAD~2
      #+end_src
   2. Use =git add --patch= to add to the staging area only the
      changes that are related to fitting the model.  *Hint:* the =git
      add --patch= command will initially display only one set of
      change (allso called "hunk").  You can ask Git to split it
      further by pressing the =s= key.
   3. Commit your changes with a clear and descriptive message
   4. add/commit the remaining changes related to plotting the data
      points.  Remember you can use =git diff=, =git status=, =git
      log= to visualise the state of the repository and what remains
      to be commited.
3. Commit =4b2e7d0= changes the delimiter separating columns in the
   data file to be a blank space instead of a comma.  Eventually, we
   learn that the data format will not change and we would like to
   revert (hint hint) back to using comma.  Add a revert commit using
   the appropriate command.
      
   
